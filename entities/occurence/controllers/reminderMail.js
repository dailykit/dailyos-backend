import { client } from '../../../lib/graphql'
import { sendEmail, autoGenerateCart, statusLogger } from '../../../utils'
import { GET_CUSTOMERS_DETAILS } from '../graphql'

export const reminderMail = async (req, res) => {
   try {
      const { subscriptionOccurenceId } = req.body.payload
      const {
         subscriptionOccurences: [
            { subscription: { subscriptionId, brand_customers = [] } = {} }
         ] = []
      } = await client.request(GET_CUSTOMERS_DETAILS, {
         id: subscriptionOccurenceId
      })

      const { products = [] } = await client.request(GET_PRODUCTS, {
         subscriptionOccurenceId,
         subscriptionId
      })
      await Promise.all(
         brand_customers.map(async brand_customer => {
            try {
               const {
                  brandCustomerId,
                  isAutoSelectOptOut,
                  subscriptionOccurence_customer
               } = brand_customer

               await statusLogger(
                  brandCustomerId,
                  subscriptionOccurenceId,
                  `Initiating Reminder mails and Auto Generating system for ${subscriptionOccurenceId} subscriptionOcurrenceId and ${brandCustomerId} brandCustomerId`
               )

               if (
                  subscriptionOccurence_customer.length !== 0 &&
                  subscriptionOccurence_customer[0].cartId != null &&
                  subscriptionOccurence_customer[0].validStatus.itemCountValid
               ) {
                  const {
                     isAuto,
                     isSkipped
                  } = subscriptionOccurence_customer[0]

                  if (isSkipped === false) {
                     if (isAuto) {
                        await statusLogger(
                           brandCustomerId,
                           subscriptionOccurenceId,
                           `Cart is autoGenerated previously for ${brandCustomerId} brandCustomer. Sending Email.`
                        )
                        await sendEmail({
                           brandCustomerId,
                           subscriptionOccurenceId,
                           fileName: 'autoGeneratedCart'
                        })
                     } else {
                        await statusLogger(
                           brandCustomerId,
                           subscriptionOccurenceId,
                           `Cart is generated by brand customer ${brandCustomerId}. Sending Email.`
                        )
                        await sendEmail({
                           brandCustomerId,
                           subscriptionOccurenceId,
                           fileName: 'allSetCart'
                        })
                     }
                  } else {
                     await statusLogger(
                        brandCustomerId,
                        subscriptionOccurenceId,
                        `Brand Customer ${brandCustomerId} has skipped the week. Sending Email`
                     )
                     await sendEmail({
                        brandCustomerId,
                        subscriptionOccurenceId,
                        fileName: 'weekSkipped'
                     })
                  }
               } else {
                  if (isAutoSelectOptOut) {
                     await statusLogger(
                        brandCustomerId,
                        subscriptionOccurenceId,
                        `Brand Customer ${brandCustomerId} doesn't have option to generate the cart. Sending Email`
                     )
                     await sendEmail({
                        brandCustomerId,
                        subscriptionOccurenceId,
                        fileName: 'weekSkipped'
                     })
                  } else {
                     await autoGenerateCart({
                        brandCustomerId,
                        subscriptionOccurenceId,
                        products
                     })
                  }
               }
            } catch (error) {
               throw Error(error.message)
            }
         })
      )

      return res.status(200).json({
         success: true,
         message: 'Successfully sent the mail'
      })
   } catch (error) {
      console.log('Reminder email -> error', error)
      return res.status(400).json({ success: false, error: error.message })
   }
}

const GET_PRODUCTS = `query getProducts($subscriptionOccurenceId: Int! $subscriptionId: Int!) {
  products: subscription_subscriptionOccurence_product(where:  {
    _or:[
      {  subscriptionOccurenceId: {_eq: $subscriptionOccurenceId}},
        {subscriptionId: {_eq: $subscriptionId}}
      ]
    }
  ) {
    cartItem
  }
}
`
